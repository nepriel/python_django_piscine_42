"""
Django settings for moviemon project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import json
import random
from cryptography.fernet import Fernet

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3%i*-j6dc50h$yf_urei%7pdr!@a30auhsbh(!1#p1f=^zq_87'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accueil',
    'worldmap',
    'battle',
    'moviedex'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'moviemon.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'moviemon.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

########################################################
#                 MOVIEMON SPECIFICS                   #
########################################################

GAMESTATEFILE = str(BASE_DIR) + "/gameState"
SAVEFILEDIR = str(BASE_DIR) + "/savefiles/"
KEYFILE = str(BASE_DIR) + "/keyfile"
RANDOMLOGFILE = str(BASE_DIR) + "/logs.json"
def write_key():
    """
    Generates a key and save it into a file
    """
    key = Fernet.generate_key()
    with open(KEYFILE, "wb") as key_file:
        key_file.write(key)
def load_key():
    """
    Loads the key from the current directory named `key.key`
    """
    return open(KEYFILE, "rb").read()
def encrypt(text: str, key):
    f = Fernet(key)
    return(f.encrypt(text.encode()))
def decrypt(text, key):
    f = Fernet(key)
    return(f.decrypt(text))
write_key()

MATRIX_WIDTH = 15
MATRIX_HEIGHT = 15
STARTING_POS = (7,7)
PLAYER_STRENGTH = 10

f = open(str(BASE_DIR) + "/titleList.json", "r")
data = json.load(f)
# print(data)
if (MATRIX_HEIGHT * MATRIX_WIDTH <= 144):
    SIZE = 'small'
    NumberOfRequests = 23
elif (MATRIX_HEIGHT * MATRIX_WIDTH <= 256):
    SIZE = 'medium'
    NumberOfRequests = 40
elif (MATRIX_HEIGHT * MATRIX_WIDTH <= 400):
    SIZE = 'big'
    NumberOfRequests = 80
else:
    SIZE = 'humongous'
    NumberOfRequests = 250
listOfMovieMons = []
for i in range(NumberOfRequests):
    listOfMovieMons.append(random.choice(data))
MOVIEMONS = list(dict.fromkeys(listOfMovieMons))

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

print('')
print(bcolors.OKBLUE + '****    ----    *****' + bcolors.ENDC)
print(bcolors.OKGREEN + "the map is considered " + SIZE + '. We decided therefore to have a list of ' + str(len(MOVIEMONS)) + ' potentials moviemons.' + bcolors.ENDC)
print(bcolors.OKCYAN + str(MOVIEMONS) + bcolors.ENDC)
print(bcolors.OKBLUE + '****    ----    *****' + bcolors.ENDC)
print('')
